/*
 * Copyright (c) 2008-2014 MongoDB, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

def configDir = new File(rootDir, 'config')

buildscript {
    repositories {
        maven { url 'https://oss.sonatype.org/content/repositories/snapshots' }
        mavenCentral()
        jcenter()
    }
    dependencies {
        classpath 'me.trnl:clirr-gradle-plugin:0.4'
//        classpath 'com.antwerkz.github:github-release-gradle-plugin:1.1.0'
    }
}

//////////////////////////////////////////
// Common behavior                      //
//////////////////////////////////////////

configure(subprojects.findAll { it.name != 'util' }) {
    apply plugin: 'java'
    apply plugin: 'checkstyle'
    apply plugin: 'findbugs'
    apply plugin: 'jacoco'
    apply plugin: 'eclipse'
    apply plugin: 'groovy'
    apply plugin: 'codenarc'
    apply plugin: 'idea'

    evaluationDependsOn(':util')

    group = 'org.mongodb'
    version = '3.0.0-cj'
    sourceCompatibility = JavaVersion.VERSION_1_6
    targetCompatibility = JavaVersion.VERSION_1_6

    repositories {
        mavenCentral()
        mavenLocal()
    }

    configurations {
        provided
        provided.extendsFrom(compile)
    }

    dependencies {
        provided 'org.slf4j:slf4j-api:1.7.6'

        testCompile 'junit:junit:4.11'
        testCompile 'org.codehaus.groovy:groovy-all:2.0.8'
        testCompile('org.spockframework:spock-core:0.7-groovy-2.0') {
            exclude group: 'junit', module: 'junit-dep'
        }
        testCompile 'cglib:cglib-nodep:2.2.2'
        testCompile 'org.objenesis:objenesis:1.3'
        testCompile 'org.hamcrest:hamcrest-all:1.3'
        testCompile 'ch.qos.logback:logback-classic:1.1.1'
        testCompile project(':util') //Adding categories to classpath
    }

    idea {
        module {
            // include 'provided' dependencies on the classpath
            scopes.PROVIDED.plus += configurations.provided
        }
    }

    javadoc {
        classpath += configurations.provided
    }

    sourceSets {
        main { java.srcDirs = ['src/main'] }
        test { java.srcDirs = ['src/test'] }
    }

    /* Compiling */
    tasks.withType(AbstractCompile) {
        options.encoding = 'ISO-8859-1'
        options.fork = true
        options.debug = true
        options.compilerArgs = ['-Xlint:all', '-Xlint:-options']

        onlyIf { JavaVersion.current().isJava7Compatible() }
    }

    project.ext.buildingWith = { n ->
        project.hasProperty(n) && project.property(n).toBoolean()
    }

    /* Testing */
    tasks.withType(Test) {
        maxParallelForks = 1
        systemProperties(
                'org.mongodb.test.uri': System.getProperty('org.mongodb.test.uri', null),
                'org.mongodb.useSocket': System.getProperty('org.mongodb.useSocket', 'false'),
                'org.mongodb.disableAsync': System.getProperty('org.mongodb.disableAsync', 'false'),
                'org.mongodb.async.type': System.getProperty('org.mongodb.async.type', 'nio2'),

                'javax.net.ssl.trustStore': System.getProperty('javax.net.ssl.trustStore', "${System.getProperty('user.home')}/.keystore"),
                'javax.net.ssl.keyStore': System.getProperty('javax.net.ssl.keyStore', "${System.getProperty('user.home')}/.keystore"),
                'javax.net.ssl.keyStorePassword': System.getProperty('javax.net.ssl.keyStorePassword', 'changeit'),
                'javax.net.ssl.trustStorePassword': System.getProperty('javax.net.ssl.trustStorePassword', 'changeit')

        )

        if (project.buildingWith('ssl.enabled')) {
            systemProperties(
                    'javax.net.ssl.keyStoreType': project.property('ssl.keyStoreType'),
                    'javax.net.ssl.keyStore': project.property('ssl.keyStore'),
                    'javax.net.ssl.keyStorePassword': project.property('ssl.keyStorePassword'),
                    'javax.net.ssl.trustStoreType': project.property('ssl.trustStoreType'),
                    'javax.net.ssl.trustStore': project.property('ssl.trustStore'),
                    'javax.net.ssl.trustStorePassword': project.property('ssl.trustStorePassword')
            )
        }

        if (project.buildingWith('gssapi.enabled')) {
            systemProperties(
                    'javax.security.auth.useSubjectCredsOnly': "false",
                    'java.security.krb5.kdc': project.getProperty('krb5.kdc'),
                    'java.security.krb5.realm': project.getProperty('krb5.realm'),
                    'java.security.auth.login.config': project.getProperty('auth.login.config'),
            )
        }

        useJUnit {
            if (!project.buildingWith('rs.enabled')) {
                excludeCategories 'category.ReplicaSet'
            }
        }

        jacoco { enabled = false }

        beforeTest { descr ->
            logger.info("[Test ${descr.className} > ${descr.name}]")
        }
    }

    gradle.taskGraph.whenReady { taskGraph ->
        if (taskGraph.hasTask(testCoverage)) {
            tasks.withType(Test) { jacoco { enabled = true } }
        }
    }

    task testCoverage(dependsOn: test)

    /* Code quality */
    checkstyle {
        configFile = new File("$configDir/checkstyle.xml")
    }

    findbugs {
        excludeFilter = new File("$configDir/findbugs-exclude.xml")
        sourceSets = [sourceSets.main]
    }

    tasks.withType(FindBugs) {
        reports {
            xml.enabled = project.buildingWith('xmlReports.enabled')
            html.enabled = !project.buildingWith('xmlReports.enabled')
        }
    }

    javadoc {
        dependsOn project(':util').compileJava //We need taglets to be compiled
        options.author = true
        options.version = true
        options.links 'http://docs.oracle.com/javase/7/docs/api/'
        options.tagletPath project(':util').sourceSets.main.output.classesDir
        options.taglets 'ManualTaglet'
        options.taglets 'ServerReleaseTaglet'
        options.encoding = 'UTF-8'
        options.charSet 'UTF-8'
        options.docEncoding 'UTF-8'
    }

}

//////////////////////////////////////////
// Project specific behavior            //
//////////////////////////////////////////

def nettyVersion = '4.0.19.Final'

project(':bson') {}

project(':driver') {
    sourceSets {
        test {
            groovy { srcDirs = ['src/test/unit', 'src/test/functional'] }
            //Note: no groovy/spock tests in acceptance, these are Java tests
            java { srcDirs = ['src/test/unit', 'src/test/functional', 'src/test/acceptance'] }
        }
    }


    dependencies {
        compile project(':bson')

        provided "io.netty:netty-all:$nettyVersion"

        testCompile "io.netty:netty-all:$nettyVersion"
    }

    sourceSets.main.compileClasspath += configurations.provided

    codenarc {
        toolVersion = '0.20'
        reportFormat = project.buildingWith('xmlReports.enabled') ? 'xml' : 'html'
    }

    task uberJar(type: Jar) {
        classifier = 'all'
        from project(':bson').sourceSets.main.output
        from sourceSets.main.output
    }
}

project(':async-driver') {
    sourceSets {
        test {
            groovy { srcDirs = ['src/test/unit', 'src/test/functional'] }
            //Note: no groovy/spock tests in acceptance, these are Java tests
            java { srcDirs = ['src/test/unit', 'src/test/functional'] }
        }
    }


    dependencies {
        compile project(':bson')
        compile project(':driver')

        provided "io.netty:netty-all:$nettyVersion"

        testCompile "io.netty:netty-all:$nettyVersion"
    }

    sourceSets.main.compileClasspath += configurations.provided

    codenarc {
        toolVersion = '0.20'
        reportFormat = project.buildingWith('xmlReports.enabled') ? 'xml' : 'html'
    }

    task uberJar(type: Jar) {
        classifier = 'all'
        from project(':bson').sourceSets.main.output
        from project(':driver').sourceSets.main.output
        from sourceSets.main.output
    }
}

project(':async-rxjava-driver') {
    sourceSets {
        test {
            groovy { srcDirs = ['src/test/functional'] }
            java { srcDirs = ['src/test/functional'] }
        }
    }

    dependencies {
        compile project(':bson')
        compile project(':driver')
        compile project(':async-driver')

        compile "com.netflix.rxjava:rxjava-core:0.17.5"

        provided "io.netty:netty-all:$nettyVersion"

        testCompile project(':async-driver').sourceSets.test.output

        testCompile "io.netty:netty-all:$nettyVersion"
    }

    sourceSets.main.compileClasspath += configurations.provided

    codenarc {
        toolVersion = '0.20'
        reportFormat = project.buildingWith('xmlReports.enabled') ? 'xml' : 'html'
    }

    task uberJar(type: Jar) {
        classifier = 'all'
        from project(':bson').sourceSets.main.output
        from project(':driver').sourceSets.main.output
        from project(':async-driver').sourceSets.main.output
        from sourceSets.main.output
    }
}

project(':driver-compat') {
    apply plugin: 'clirr'

    sourceSets {
        test {
            groovy.srcDirs = ['src/test/unit']
            java.srcDirs = ['src/test/unit', 'src/test/legacy', 'src/examples']
        }
    }

    test {
        exclude 'tour/**'
    }

    dependencies {
        compile project(':bson')
        compile project(':driver')

        testCompile project(':driver').sourceSets.test.output
    }

    clirr {
        ignoreFailures = true
        excludeFilter = new File("$configDir/clirr-exclude.yml")
        baseline 'org.mongodb:mongo-java-driver:2.12.0'
    }

    checkstyle {
        configFile = new File("$configDir/checkstyle-lite.xml")
    }

    codenarc {
        toolVersion = '0.20'
        reportFormat = project.buildingWith('xmlReports.enabled') ? 'xml' : 'html'
    }

    task uberJar(type: Jar) {
        classifier = 'all'
        from project(':bson').sourceSets.main.output
        from project(':driver').sourceSets.main.output
        from sourceSets.main.output
    }
}

//////////////////////////////////////////
// Root project configuration           //
//////////////////////////////////////////
task wrapper(type: Wrapper) {
    gradleVersion = '1.11'
}

gradle.buildFinished { BuildResult result ->
    if (result.failure && !JavaVersion.current().isJava7Compatible()) {
        gradle.rootProject.logger.error("\n* Warning:\nJDK ${JavaVersion.VERSION_1_7} is minimal requirement for building the driver. " +
                "You have ${JavaVersion.current()}.")
    }
}


apply from: 'gradle/maven-deployment.gradle'
apply from: 'gradle/osgi-compatibility.gradle'
//apply from: 'gradle/release-process.gradle'
